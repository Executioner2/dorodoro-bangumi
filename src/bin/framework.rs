//! 这个 bin 是 bt 模块的主要架构模型。
//!
//! 整个 bt lib 的架构模型如下图所示：
//!
//! ```
//! +----------------+
//! |                |
//! |     Torrent    |
//! |                |
//! +----------------+
//!     |
//!     |
//! +----------------+
//! |                |
//! |     Tracker    |
//! |                |
//! +----------------+
//!     |
//! +----------------+
//! |                |
//! |      Peer      |
//! |                |
//! +----------------+
//! ```
//!
//! 其中，Torrent 模块负责解析种子文件，生成 Torrent 实例，并将其交给 Tracker 模块。
//! Tracker 模块负责维护种子文件的状态，并向 Peer 发送下载请求。
//! Peer 模块负责下载种子文件，并向 Tracker 发送上传信息。
//!
//! 整个 bt lib 的架构模型可以分为三个部分，分别负责不同的功能。
//!
//!     1. Torrent 模块：负责解析种子文件，生成 Torrent 实例，并将其交给 Tracker 模块。
//!     2. Tracker 模块：负责维护种子文件的状态，并向 Peer 发送下载请求。
//!     3. Peer 模块：负责下载种子文件，并向 Tracker 发送上传信息。

/// 这个代表 Torrent 模块
struct Torrent {

}

/// 这个代表 Tracker 模块
struct Tracker {

}

/// 这个代表 Peer 模块
struct Peer {

}

#[tokio::main]
async fn main() {
}